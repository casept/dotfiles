# LSP config
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable
lsp-auto-hover-enable
lsp-auto-signature-help-enable

# Show line numbers
add-highlighter global/ number-lines

# Allow for indentation and completion using tab
hook global InsertCompletionShow .* %{
        try %{
            # this command temporarily removes cursors preceded by whitespace;
                  #         # if there are no cursors left, it raises an error, does not
                    #                 # continue to execute the mapping commands, and the error is eaten
                    #                         # by the `try` command so no warning appears.
                                                     execute-keys -draft 'h<a-K>\h<ret>'
                                                             map window insert <tab> <c-n>
                                                                     map window insert <s-tab> <c-p>
                                                                         }
                                                                         }
                                                                         hook global InsertCompletionHide .* %{
                                                                                 unmap window insert <tab> <c-n>
                                                                                     unmap window insert <s-tab> <c-p>
                                                                                     }

# Tab is 4 spaces
set global indentwidth 4
set global tabstop 4


# Rainbow brackets
# hook global NormalIdle .* %{ rainbow-enable }
# Source: https://github.com/JJK96/kakoune-rainbow/blob/master/rainbow.kak
# Copy-paste because nix makes it difficult to install kak packages while keeping default autoload.
declare-option -hidden range-specs rainbow
declare-option regex rainbow_opening "[\[{(]"
declare-option bool rainbow_highlight_background false

declare-option str-list rainbow_faces "bright-red" "bright-green" "bright-yellow" "bright-blue" "bright-magenta" "bright-cyan"

define-command rainbow %{
    set-option window rainbow "%val{timestamp}"
    try %{
        add-highlighter window/ ranges rainbow
    }
    evaluate-commands -save-regs '/' -draft %{
        set-register / "%opt{rainbow_opening}"
        execute-keys \%
        try %{
            rainbow-selection 0
        }
    }
}

define-command -hidden rainbow-selection -params 1 %{
    evaluate-commands %sh{
        index=$1
        eval "set -- $kak_quoted_opt_rainbow_faces"
        length=$#
        next_index=$(( (index + 1) % (length - 1) ))
        index=$(( index + 1 ))
        eval face=\$$index
        select_ends=""
            if ! $kak_opt_rainbow_highlight_background; then
                select_ends="execute-keys <a-S>"
            fi
            echo "
                execute-keys s<ret>m
                evaluate-commands -draft %{
                    $select_ends
                    evaluate-commands -itersel %{
                        set-option -add window rainbow \"%val{selection_desc}|$face\"
                    }
                }
                execute-keys <a-K>\A..\z<ret> #if there is no content do not recurse
                evaluate-commands -itersel -draft %{
                    execute-keys H<a-\;>L
                    try %{
                        rainbow-selection $next_index
                    }
                }
            "
        }
}

define-command rainbow-enable %{
    hook -group rainbow window InsertIdle .* %{ rainbow }
    hook -group rainbow window NormalIdle .* %{ rainbow }
}

define-command rainbow-disable %{
    remove-highlighter window/ranges_rainbow
    remove-hooks window rainbow
}




# Highlight TODO, FIXME etc
add-highlighter global/ regex \b(TODO|FIXME|NOTE)\b 0:default+rb
